A) Restful API
    A.1) Definisi
    : Aplikasi yang ada pada back-end. Berfungsi sebagai perantara transaksi
    data antara front-end dengan database. REST API memanfaatkan protokol(jalur) HTTP
    dalam bertransaksi data sehingga untuk mendapatkan data dari REST API, Aplikasi
    front-end perlu mengirimkan sebuah HTTP request.

    A.2) Cara frontend berkomunikasi dengan Rest API
    : Restful API memanfaatkan HTTP verb seperti
      - GET. Untuk mendapatkan data
      - POST. Untuk mengirim data
      - PUT. Untuk memperbarui data
      - DELETE. Untuk menghapus data.

B) Fetch
    B.1) Definisi
    : Fetch ialah built in function javascript untuk membuat sebuah network request.

    B.2) Syntax 
    : const <nama function> = async () =>{
        const <nama variable response> = await fetch('<url>', {fetch options});
        const <nama variable data> = await<nama variable response>.json();
    }

    B.3) Contoh Tanpa fetch options
    : const fetchUsers = async () =>{
        const response = await fetch('https://jsonplaceholder.typicode.com/users');
        const users = await response.json();
    }

    B.4) Contoh Dengan fetch options
    const createUser = async () =>{
    const response = await fetch('https://jsonplaceholder.typicode.com/users', {
        method: 'POST',
        body: JSON.stringify({
            id: 33,
            name: "Aditya Negara",
            username: "Adit",
            email: "aditnegara51@gmail.com",
        }),
        headers: {
            'Content-type': 'application/json; charset=UTF-8',
        }
    });
        const newUser = await response.json();
    }

    B.4) Penjelasan
    : variable response mendapatkan data yang berbentuk ReadableStream. 
    ReadableStream ini harus dikonversi ke JSON dengan method json().
    Method json() ini ialah fungsi asinkronus.

    Parameter kedua dari fetch berisikan opsi untuk memasukan konfigurasi
    request. Seperti method, headers, dan body.

C) Same Origin Policy
    C.1) Permasalahan
    : Aplikasi frontend dapat bertransaksi data menggunakan fungsi fetch( Ke berbagai resource
    di internet, bahkan lintas origin(alamat). Contoh jika anda memiliki aplikasi
    front-end yang beralamat di https://adityanegara.com yang akan mengambil data 
    dari alamat https://api.adityanegara.net. 
    Tetapi hal ini tidak akan berhasil karena ada same-origin policy. 

    C.2) Definisi
    : Protokol yang melarang website bertukar data bila protokol, host, dan port berbeda.
        C.2.1) Destruktur origin
        : http://adityanegara.com
            - http:// = protokol
            - host: adityanegara.com
            - port: 80

    C.3) CORS 
    : Cross Origin Resource Sharing ialah mekanisme yang mengizinkan browser mengakses
    resources di luar origin nya. 
        C.3.1) Konfigurasi CORS
        : Dengan memberikan properti 'Access-Control-Allow-Origin' pada response header
        dengan nilai yang dibolehkan.
        'Access-Control-Allow-Origin', 'http//adityanegara.com'


